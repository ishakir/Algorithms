1.  Maximum No Edges, V vertices, no parallel edges: Everything has an edge to everything else V(V - 1)/2
	Minimum No Edges, V vertices, no isolated vertex: If V Even: V /2
													  If V Odd: (V - 1)/2 + 1
2.  12 vertices, 16 edges
	0:  5  2  6
	1:  4  8  11
	2:  5  6  0  3
	3:  10 6  2
	4:  1  8
	5:  0  10 2
	6:  2  3  0
	7:  8  11
	8:  1  11 7  4
	9:  
	10: 5  3
	11: 8  7  1
3.  Implemented in graph.AdjacancyListGraph
4.  Implemented in graph.Graph and graph.AdjacancyListGraph
5.  Implemented in graph.Graph and graph.AdjacancyListGraph
6.  0: 1 3
	1: 2 0
	2: 3 1
	3: 0 2
	(One of the operations has to be done first, which means there must be a pair
	e.g. 3 -> 1, 1-> 3 in the last column, there is no such in this example, there
	is only a cycle 3 -> 0 -> 1 -> 2 -> 3, and as such this cannot be formed by
	calls to addEdge)
7.  Implemented in graph.client.FileGraphReader
8.  Not Done - Partially implemented in graph.search.UnionFindSearch but tests not passing
9.  					marked  		edgeTo
						
	dfs(0) 				0				empty
	| dfs(5)			0,5				5 -> 0
	| | check 0
	| | dfs(10) 		0,5,10			5 -> 0
	| | | check 5						10 -> 5
	| | |
	| | | dfs(3)		0,5,10,3		5 -> 0
	| | | | check 10					10 -> 5
	| | | |								3 -> 10
	| | | |
	| | | |	dfs(6)		0,5,6,10,3  	5 -> 0
	| | | |	|							10 -> 5
	| | | |	|							3 -> 10
	| | | |	|							6 -> 3
	| | | | |
	| | | | | dfs(2)	0,2,3,5,6,10	5 -> 0
	| | | | | check 6   				10 -> 5
	| | | | | check 0					3 -> 10
	| | | | | check 3					6 -> 3
	| | | | | 							2 -> 6
	| | | | 6 done
	| | | | check 2
	| | | 3 done
	| | 10 done
	| | check 2
	| 5 done
	| check 2
	| check 6
	0 done
	
	Edge To tree:
	
	0 -> 5 -> 10 -> 3 -> 6 -> 2
10. Consider a vertex which has all adjacent verticies marked, but is not marked
	itself. This means that in a depth first search from another node all of the
	nodes around it are reachable without traversing the node in question. This 
	means that removing it will not cause the graph to become disconnected, as all
	the other nodes were already reachable.
	
	It is obvious that such a node like this always exists in a connected graph, as
	we can always choose the last node encountered in a depth first search.
	
	Implemented in graph.search.client.NonConnectedBreakingNode
11.  /-5--10
	0--2--3
	 \-6
12. If neither is the root the BFS tree gives us purely an upper bound on the distance
	one vertex and another.
13. Not Done - Time for query is dependant on graph size, but implementation exists in graph.search.BreadthFirstPaths
14. No it does not, it computes depth first paths, as the element to come out of the stack
	next is always the children of those that were most recently explored.
15. Not Done
16. Not Done
17. Not Done
18. Not Done
19. Not Done
20. Not Done
21. Not Done
22. Not Done
23. Not Done
24. Not Done
25. Not Done
26. Not Done
27. Not Done
28. Not Done
29. Not Done
30. Not Done
31. Not Done
32. Not Done
33. Not Done
34. Not Done
35. Not Done
36. Not Done
37. Not Done
38. Not Done
39. Not Done
40. Not Done
41. Not Done
42. Not Done
43. Not Done
44. Not Done
45. Not Done
46. Not Done
47. Not Done
48. Not Done
49. Not Done
50. Not Done